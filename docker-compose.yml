services:
  movie-finder:
    image: movie-finder:1.0.0
    build:
      context: .
      dockerfile: Dockerfile
    #container_name: movie-finder
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_DRIVERCLASSNAME: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/moviedb?useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: movie_one
      SPRING_DATASOURCE_PASSWORD: movie_pw
      APIKEY_OMDB: yyyyyyOMDBxxxxxx
      APIKEY_TMDB: kkkkkkkkTMDBzzzzzz
      CACHE_DURATION_MINUTES_OMDB: 30
      CACHE_DURATION_MINUTES_TMDB: 45
      SPRING_DATA_REDIS_HOST: cache
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - ./logs:/logs
      - .m2:/root/.m2
    networks:
      - mynetwork
  db:
    image: mysql
    restart: always
    environment:
      MYSQL_USER: movie_one
      MYSQL_PASSWORD: movie_pw
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: moviedb
    ports:
      - 3306:3306
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes: 
      - cache:/data
    networks:
      - mynetwork
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
volumes:
  cache:
    driver: local
networks:
  mynetwork:
    driver: bridge